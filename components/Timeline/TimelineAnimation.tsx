"use client";

import {
  motion,
  animate,
  useMotionValue,
  useTransform,
  useReducedMotion,
} from "motion/react";
import React, { useState, useEffect } from "react";
import { interpolate } from "flubber";

const paths: string[] = [
  "M917.785 1165.94H916.847C804.672 1165.94 713.419 1074.17 713.419 961.349V735.267L652.418 966.29C621.338 1083.88 515.181 1166 394.228 1166C288.512 1166 196.983 1103.93 153.703 1014.15L126.377 1117.92C118.924 1146.23 93.4201 1166 64.2723 1166C44.1779 1166 25.6293 1156.84 13.374 1140.79C1.11861 1124.8 -2.96651 1104.37 2.16749 1084.83L127.095 610.622V85.336C127.095 38.2541 165.186 0 211.944 0C238.497 0 263.008 12.1591 279.182 33.3127C295.357 54.4663 300.767 81.394 293.977 107.211L160.217 614.952V859.301L346.421 152.239C370.049 62.5724 450.923 0 543.114 0C655.289 0 746.542 91.7765 746.542 204.595V480.147L824.876 183.609C853.417 75.5088 951.073 0 1062.25 0C1139.1 0 1210.04 35.1449 1256.9 96.3848C1303.77 157.625 1319.34 235.632 1299.69 310.308L1114.42 1013.71C1090.8 1103.32 1009.92 1165.94 917.785 1165.94ZM746.542 609.9V961.349C746.542 1055.79 822.944 1132.63 916.847 1132.63H917.785C994.961 1132.63 1062.64 1080.22 1082.4 1005.21L1267.67 301.813C1284.67 237.186 1271.2 169.728 1230.68 116.705C1190.11 63.7383 1128.72 33.3127 1062.25 33.3127C966.034 33.3127 881.571 98.6611 856.84 192.159L746.486 609.844L746.542 609.9ZM168.277 958.684C195.217 1058.79 286.304 1132.63 394.228 1132.63C502.152 1132.63 593.184 1060.68 620.4 957.685L713.419 605.514V204.595C713.419 110.154 637.016 33.3127 543.114 33.3127C465.938 33.3127 398.258 85.7247 378.495 160.734L168.277 958.684ZM127.04 740.652L34.1308 1093.32C31.6466 1102.76 33.6339 1112.64 39.5408 1120.42C45.4476 1128.19 54.4459 1132.63 64.2171 1132.63C78.2942 1132.63 90.6599 1123.08 94.3034 1109.37L134.05 958.462C129.468 938.807 127.04 918.32 127.04 897.278V740.708V740.652ZM211.888 33.3127C183.348 33.3127 160.162 56.6316 160.162 85.336V484.866L261.904 98.6611C266.044 82.9486 262.787 66.5144 252.905 53.6334C243.024 40.7525 228.118 33.3127 211.888 33.3127Z",
  "M18.2457 1053.95C18.2457 1104.53 7.8642 1184 122.061 1184C236.257 1184 694.865 1184 741.582 1184C868.755 1184 910.281 1152.69 910.281 1073.22C910.281 1015.42 910.281 353.502 910.281 312.562C910.281 235.497 822.557 207.334 741.582 235.497C660.606 263.659 569.195 294.22 290.76 381.714C219.459 404.119 176.564 394.479 176.564 312.562C176.564 230.644 176.564 143.23 176.564 116.739C176.564 42.0826 251.83 18.0002 290.76 18.0001C399.797 17.9998 641.136 18.0001 677.472 18.0001C768.31 18.0001 763.119 126.372 677.472 128.781C591.824 131.189 264.807 128.781 153.206 128.781C41.6043 128.781 18.2458 128.781 18.2458 237.153C18.2458 292.543 18.2457 1015.66 18.2457 1053.95Z",
  "M654.904 472.018C709.568 472.018 784.733 472.018 887.228 472.018C946.775 472.018 972.64 499.884 972.64 550.458C972.64 766.333 972.64 1031.55 972.64 1045.3C972.64 1132.8 942.069 1184 859.791 1184C822.209 1184 181.597 1184 116.94 1184C52.2832 1184 -86.4094 1051.18 153.377 860.764C207.446 821.976 630.591 490.792 654.904 472.018ZM654.904 472.018C552.409 472.018 401.744 472.018 321.456 472.018C267.388 472.018 203.926 445.847 203.926 368.832C203.926 301.761 203.926 147.668 203.926 134.084C203.926 67.0133 246.23 18 321.456 18C355.621 18 883.811 18 894.061 18C1009.07 18 1051.39 115.558 960.88 199.012C902.803 252.563 804.551 342.411 654.904 472.018Z",
  "M18.0003 301.283C18.0003 184.706 16.8329 147.401 172.091 147.401C327.349 147.401 504.786 147.401 561.986 147.401C664.713 147.401 665.88 18 561.986 18C458.092 18 301.667 18 250.303 18C107.886 18 120.727 263.978 250.303 263.978C379.879 263.978 598.174 263.978 649.538 263.978C807.13 263.978 818.211 369.043 737.089 486.641C664.713 591.561 371.708 986.758 318.01 1057.87C284.914 1101.7 244.29 1156.8 201.274 1173.28C110.93 1207.91 18.0003 1155.8 18.0003 1057.87C18.0003 798.602 18.0003 445.45 18.0003 301.283Z",
  "M917.785 1165.94H916.847C804.672 1165.94 713.419 1074.17 713.419 961.349V735.267L652.418 966.29C621.338 1083.88 515.181 1166 394.228 1166C288.512 1166 196.983 1103.93 153.703 1014.15L126.377 1117.92C118.924 1146.23 93.4201 1166 64.2723 1166C44.1779 1166 25.6293 1156.84 13.374 1140.79C1.11861 1124.8 -2.96651 1104.37 2.16749 1084.83L127.095 610.622V85.336C127.095 38.2541 165.186 0 211.944 0C238.497 0 263.008 12.1591 279.182 33.3127C295.357 54.4663 300.767 81.394 293.977 107.211L160.217 614.952V859.301L346.421 152.239C370.049 62.5724 450.923 0 543.114 0C655.289 0 746.542 91.7765 746.542 204.595V480.147L824.876 183.609C853.417 75.5088 951.073 0 1062.25 0C1139.1 0 1210.04 35.1449 1256.9 96.3848C1303.77 157.625 1319.34 235.632 1299.69 310.308L1114.42 1013.71C1090.8 1103.32 1009.92 1165.94 917.785 1165.94ZM746.542 609.9V961.349C746.542 1055.79 822.944 1132.63 916.847 1132.63H917.785C994.961 1132.63 1062.64 1080.22 1082.4 1005.21L1267.67 301.813C1284.67 237.186 1271.2 169.728 1230.68 116.705C1190.11 63.7383 1128.72 33.3127 1062.25 33.3127C966.034 33.3127 881.571 98.6611 856.84 192.159L746.486 609.844L746.542 609.9ZM168.277 958.684C195.217 1058.79 286.304 1132.63 394.228 1132.63C502.152 1132.63 593.184 1060.68 620.4 957.685L713.419 605.514V204.595C713.419 110.154 637.016 33.3127 543.114 33.3127C465.938 33.3127 398.258 85.7247 378.495 160.734L168.277 958.684ZM127.04 740.652L34.1308 1093.32C31.6466 1102.76 33.6339 1112.64 39.5408 1120.42C45.4476 1128.19 54.4459 1132.63 64.2171 1132.63C78.2942 1132.63 90.6599 1123.08 94.3034 1109.37L134.05 958.462C129.468 938.807 127.04 918.32 127.04 897.278V740.708V740.652ZM211.888 33.3127C183.348 33.3127 160.162 56.6316 160.162 85.336V484.866L261.904 98.6611C266.044 82.9486 262.787 66.5144 252.905 53.6334C243.024 40.7525 228.118 33.3127 211.888 33.3127Z",
];

export const TimelineAnimation = () => {
  const [pathIndex, setPathIndex] = useState<number>(0);
  const progress = useMotionValue(0);
  const getIndex = paths.map((_, i) => i);
  const path = useTransform(progress, getIndex, paths, {
    mixer: (a, b) => interpolate(a, b),
  });

  useEffect(() => {
    animate(progress, pathIndex, {
      duration: 0.5,
      ease: "easeInOut",
      delay: 0.3,
      onComplete: () => {
        if (pathIndex === paths.length - 1) {
          setTimeout(() => {
            progress.set(0);
            setPathIndex(1);
          }, 300);
        } else {
          setPathIndex(pathIndex + 1);
        }
      },
    });
  }, [pathIndex, progress]);

  const prefersReducedMotion = useReducedMotion();
  if (prefersReducedMotion) {
    return (
      <svg
        width="100%"
        height="100%"
        viewBox="0 0 1205 1166"
        preserveAspectRatio="none"
      >
        <path d={paths[0]} fill="#F4F8FA" />
      </svg>
    );
  }

  return (
    <motion.svg
      width="100%"
      height="100%"
      viewBox="0 0 1205 1166"
      preserveAspectRatio="none"
    >
      <motion.path d={path} fill="#F4F8FA" />
    </motion.svg>
  );
};
