"use client";

import {
  motion,
  animate,
  useMotionValue,
  useTransform,
  useInView,
} from "motion/react";
import React, { useState, useEffect, useRef } from "react";
import { interpolate } from "flubber";

const paths: string[] = [
  "M8.8424 441.169C8.84239 467.353 3.94519 508.5 57.8143 508.5C111.683 508.5 291.655 508.5 313.693 508.5C373.683 508.5 393.272 492.29 393.272 451.144C393.272 421.219 393.272 178.077 393.272 156.88C393.272 116.98 370.961 92.7327 307.571 116.98C244.181 141.227 229.964 154.796 176.571 184.629C118.727 216.95 83.5247 190.318 83.5247 159.691C83.5247 117.279 83.5247 73.3376 83.5247 59.6219C83.5247 20.9687 119.029 8.50015 137.394 8.50009C188.829 8.49994 302.674 8.50012 319.814 8.50012C362.665 8.50013 360.216 64.6095 319.814 65.8563C279.412 67.1032 125.151 65.8563 72.506 65.8563C19.8612 65.8563 8.84246 65.8563 8.84245 121.966C8.84245 150.644 8.8424 421.34 8.8424 441.169Z",
  "M381.334 134.835C381.334 82.8456 381.9 66.2088 306.632 66.2088C231.364 66.2088 145.344 66.2088 117.614 66.2088C67.8123 66.2088 67.2464 8.5 117.614 8.5C167.981 8.5 243.815 8.5 268.715 8.5C337.758 8.5 331.533 118.199 268.715 118.199C205.898 118.199 100.07 118.199 75.1693 118.199C-1.23039 118.199 -6.60214 165.054 32.725 217.499C67.8123 264.29 209.859 440.536 235.892 472.25C251.936 491.796 271.63 516.368 292.484 523.72C336.282 539.162 381.334 515.923 381.334 472.25C381.334 356.624 381.334 199.13 381.334 134.835Z",
  "M223.626 284H223.398C196.066 284 173.833 261.645 173.833 234.165V179.096L158.97 235.368C151.398 264.012 125.532 284.014 96.0627 284.014C70.3051 284.014 48.0044 268.894 37.4592 247.026L30.8013 272.302C28.9855 279.199 22.7714 284.014 15.6696 284.014C10.7736 284.014 6.25429 281.782 3.2683 277.874C0.282312 273.979 -0.713018 269.002 0.53787 264.242L30.9761 148.735V20.7861C30.9761 9.31791 40.2569 0 51.6494 0C58.1191 0 64.091 2.96171 68.032 8.11429C71.973 13.2669 73.2911 19.8259 71.6367 26.1145L39.0464 149.79V209.308L84.4146 37.0823C90.1714 15.2413 109.876 0 132.338 0C159.67 0 181.903 22.3549 181.903 49.8352V116.954L200.989 44.7232C207.943 18.3924 231.737 0 258.826 0C277.549 0 294.833 8.56057 306.252 23.4773C317.672 38.3941 321.465 57.3951 316.676 75.5846L271.537 246.918C265.78 268.745 246.075 284 223.626 284ZM181.903 148.559V234.165C181.903 257.169 200.519 275.886 223.398 275.886H223.626C242.43 275.886 258.92 263.119 263.735 244.849L308.875 73.5154C313.018 57.7737 309.736 41.3423 299.863 28.427C289.977 15.5253 275.02 8.11429 258.826 8.11429C235.382 8.11429 214.803 24.0318 208.777 46.8059L181.89 148.546L181.903 148.559ZM41.0101 233.516C47.5739 257.899 69.7671 275.886 96.0627 275.886C122.358 275.886 144.538 258.359 151.169 233.272L173.833 147.491V49.8352C173.833 26.8312 155.218 8.11429 132.338 8.11429C113.535 8.11429 97.0445 20.8808 92.2293 39.1514L41.0101 233.516ZM30.9627 180.408L8.32565 266.311C7.72039 268.61 8.2046 271.017 9.6438 272.91C11.083 274.804 13.2754 275.886 15.6561 275.886C19.086 275.886 22.0989 273.56 22.9866 270.219L32.6709 233.462C31.5545 228.674 30.9627 223.684 30.9627 218.558V180.421V180.408ZM51.636 8.11429C44.6821 8.11429 39.0329 13.7943 39.0329 20.7861V118.103L63.822 24.0318C64.8308 20.2046 64.0372 16.2015 61.6296 13.064C59.222 9.92648 55.5904 8.11429 51.636 8.11429Z",
];

//  1 to 100 svg
// const paths: string[] = [
//   "M381.334 134.835C381.334 82.8456 381.9 66.2088 306.632 66.2088C231.364 66.2088 145.344 66.2088 117.614 66.2088C67.8123 66.2088 67.2464 8.5 117.614 8.5C167.981 8.5 243.815 8.5 268.715 8.5C337.758 8.5 331.533 118.199 268.715 118.199C205.898 118.199 100.07 118.199 75.1693 118.199C-1.23039 118.199 -6.60214 165.054 32.725 217.499C67.8123 264.29 209.859 440.536 235.892 472.25C251.936 491.796 271.63 516.368 292.484 523.72C336.282 539.162 381.334 515.923 381.334 472.25C381.334 356.624 381.334 199.13 381.334 134.835Z",
//   "M223.626 284H223.398C196.066 284 173.833 261.645 173.833 234.165V179.096L158.97 235.368C151.398 264.012 125.532 284.014 96.0627 284.014C70.3051 284.014 48.0044 268.894 37.4592 247.026L30.8013 272.302C28.9855 279.199 22.7714 284.014 15.6696 284.014C10.7736 284.014 6.25429 281.782 3.2683 277.874C0.282312 273.979 -0.713018 269.002 0.53787 264.242L30.9761 148.735V20.7861C30.9761 9.31791 40.2569 0 51.6494 0C58.1191 0 64.091 2.96171 68.032 8.11429C71.973 13.2669 73.2911 19.8259 71.6367 26.1145L39.0464 149.79V209.308L84.4146 37.0823C90.1714 15.2413 109.876 0 132.338 0C159.67 0 181.903 22.3549 181.903 49.8352V116.954L200.989 44.7232C207.943 18.3924 231.737 0 258.826 0C277.549 0 294.833 8.56057 306.252 23.4773C317.672 38.3941 321.465 57.3951 316.676 75.5846L271.537 246.918C265.78 268.745 246.075 284 223.626 284ZM181.903 148.559V234.165C181.903 257.169 200.519 275.886 223.398 275.886H223.626C242.43 275.886 258.92 263.119 263.735 244.849L308.875 73.5154C313.018 57.7737 309.736 41.3423 299.863 28.427C289.977 15.5253 275.02 8.11429 258.826 8.11429C235.382 8.11429 214.803 24.0318 208.777 46.8059L181.89 148.546L181.903 148.559ZM41.0101 233.516C47.5739 257.899 69.7671 275.886 96.0627 275.886C122.358 275.886 144.538 258.359 151.169 233.272L173.833 147.491V49.8352C173.833 26.8312 155.218 8.11429 132.338 8.11429C113.535 8.11429 97.0445 20.8808 92.2293 39.1514L41.0101 233.516ZM30.9627 180.408L8.32565 266.311C7.72039 268.61 8.2046 271.017 9.6438 272.91C11.083 274.804 13.2754 275.886 15.6561 275.886C19.086 275.886 22.0989 273.56 22.9866 270.219L32.6709 233.462C31.5545 228.674 30.9627 223.684 30.9627 218.558V180.421V180.408ZM51.636 8.11429C44.6821 8.11429 39.0329 13.7943 39.0329 20.7861V118.103L63.822 24.0318C64.8308 20.2046 64.0372 16.2015 61.6296 13.064C59.222 9.92648 55.5904 8.11429 51.636 8.11429Z",
// ];

export const ShapeAnimation = ({ onComplete }: { onComplete?: () => void }) => {
  const [pathIndex, setPathIndex] = useState<number>(0);
  const progress = useMotionValue(0);
  const getIndex = paths.map((_, i) => i);
  const ref = useRef<SVGSVGElement | null>(null);
  const isInView = useInView(ref as React.RefObject<Element>, { once: true });
  const path = useTransform(progress, getIndex, paths, {
    mixer: (a, b) => interpolate(a, b),
  });

  useEffect(() => {
    if (isInView) {
      animate(progress, pathIndex, {
        duration: 0.8,
        ease: "easeInOut",
        delay: 0.4,
        onComplete: () => {
          setPathIndex(pathIndex + 1);

          if (pathIndex + 1 === paths.length) {
            onComplete?.();
          }
        },
      });
    }
  }, [isInView, onComplete, pathIndex, progress]);

  return (
    <motion.svg
      ref={ref}
      width="402"
      height="537"
      viewBox="0 0 402 537"
      preserveAspectRatio="none"
    >
      <motion.path
        d={path}
        stroke="#F83535"
        strokeWidth="16"
        fill="transparent"
      />
    </motion.svg>
  );
};
