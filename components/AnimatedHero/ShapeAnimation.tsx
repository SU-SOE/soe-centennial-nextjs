"use client";

import {
  motion,
  animate,
  useMotionValue,
  useTransform,
  useInView,
} from "motion/react";
import React, { useState, useEffect, useRef } from "react";
import { interpolate } from "flubber";

const paths: string[] = [
  "M0.500109 120.505C0.500109 73.5523 0.0549583 56.8291 56.0628 55.1827C54.2629 28.1046 67.9211 0 99.3185 0H231.904C276.099 0 275.603 55.0453 231.904 55.0453H66.048C62.5347 55.0453 59.2096 55.0902 56.0628 55.1827C57.7359 80.3527 72.7651 104.636 99.3185 104.636H269.147C336.185 104.636 340.898 149.329 306.39 199.353C275.603 243.985 150.962 412.096 128.12 442.346C114.041 460.99 96.7606 484.428 78.4623 491.441C40.0313 506.17 0.500109 484.004 0.500109 442.346V120.505Z",
  "M38.1358 496C-3.71453 496 0.0900493 462.193 0.0900493 440.68L0.0900721 93.2246C0.0900725 47.1245 8.65042 47.1245 49.5496 47.1245C52.1079 47.1245 54.9749 47.1285 58.1099 47.1358V42.0023C58.1099 10.2444 85.6931 0.000103933 99.9603 5.76335e-05C131.318 -4.41265e-05 192.532 1.38215e-05 223.869 4.34863e-05L241.681 5.76335e-05C274.971 5.76335e-05 273.069 46.1001 241.681 47.1245C212.256 48.0849 105.095 47.2446 58.1099 47.1358V180.464C58.1099 215.311 76.7757 225.247 99.9603 209.88C186.106 152.786 241.203 110.89 265.176 92.52C289.148 74.1505 327 92.5201 327 125.302V448.876C327 482.682 311.782 496 265.176 496H38.1358Z",
  "M129.086 0H372.664C421.588 0 439.588 41.5 401.088 77C376.383 99.7798 334.588 138 270.93 193.133H369.757C395.088 193.133 406.091 204.987 406.091 226.5V437C406.091 474.221 393.086 496 358.086 496H42.0877C14.5836 496 -44.4143 439.5 57.5876 358.5C80.5876 342 260.588 201.119 270.93 193.133H129.086C106.086 193.133 79.0904 182 79.0904 149.239C79.0903 126.476 79.0904 80.1499 79.0905 59.4143L79.0905 49.3805C79.0905 20.8496 97.0859 0 129.086 0Z",
  // "M719.092 496H40.9131C4.16393 496 -32.5858 431.985 49.265 396.078C62.9198 390.087 217.98 317.382 373.321 243.468V58.9903C373.321 32.5049 378.332 0 438.467 0H673.992C734.124 0 759.182 53.4123 673.992 97.5146C621.362 124.761 497.252 184.499 373.321 243.468V310.602C373.321 338.291 381.825 381.706 421.763 380.427C466.302 379 547.918 324.914 620.538 288.932C673.992 262.447 759.182 268.466 759.182 323.845V438.214C759.182 480.349 769.204 496 719.092 496Z",
  "M387.627 492.977H388.024C426.977 492.977 461.17 466.497 471.159 428.608L549.486 131.202C557.795 99.6282 551.213 66.6457 531.398 40.7527C511.583 14.8597 481.592 0 449.103 0C402.098 0 360.81 31.9261 348.744 77.6321L315.625 203.012V86.5056C315.625 38.8043 277.045 0 229.619 0C190.642 0 156.45 26.4564 146.461 64.3687L67.7371 363.324V311.667V260.01L124.289 45.3304C127.159 34.4145 124.872 23.029 118.034 14.085C111.195 5.14104 100.832 0 89.6061 0C69.8377 0 53.7335 16.1743 53.7335 36.0812V258.179L0.916376 458.68C-1.25419 466.943 0.472928 475.582 5.65428 482.342C10.8356 489.127 18.6777 493 27.1732 493C39.4964 493 50.2792 484.643 53.4301 472.671L64.9831 428.796C83.2812 466.755 121.978 493 166.673 493C217.81 493 262.691 458.28 275.831 408.56L301.621 310.88V406.471C301.621 454.172 340.201 492.977 387.627 492.977Z",
  "M388.024 492.802H387.627C340.201 492.802 301.621 454.012 301.621 406.327V310.771L275.831 408.416C262.691 458.119 217.81 492.826 166.673 492.826C121.978 492.826 83.2812 466.59 64.9831 428.644L53.4301 472.504C50.2792 484.472 39.4964 492.826 27.1732 492.826C18.6777 492.826 10.8356 488.954 5.65428 482.172C0.472928 475.414 -1.25419 466.778 0.916376 458.518L53.7335 258.088V36.0684C53.7335 16.1686 69.8377 0 89.6061 0C100.832 0 111.195 5.13923 118.034 14.0801C124.872 23.0209 127.159 34.4023 124.289 45.3144L67.7371 259.918V363.195L146.461 64.3459C156.45 26.4471 190.642 0 229.619 0C277.045 0 315.625 38.7906 315.625 86.4751V202.941L348.744 77.6047C360.81 31.9148 402.098 0 449.103 0C481.592 0 511.583 14.8545 531.398 40.7383C551.213 66.6222 557.795 99.593 549.486 131.156L471.159 428.457C461.17 466.332 426.977 492.802 388.024 492.802ZM315.625 257.783V406.327C315.625 446.244 347.927 478.722 387.627 478.722H388.024C420.652 478.722 449.266 456.57 457.622 424.866L535.949 127.565C543.138 100.25 537.443 71.738 520.312 49.3272C503.157 26.9399 477.204 14.0801 449.103 14.0801C408.422 14.0801 372.713 41.7005 362.257 81.2185L315.602 257.759L315.625 257.783ZM71.1447 405.201C82.5343 447.512 121.044 478.722 166.673 478.722C212.301 478.722 250.788 448.309 262.294 404.779L301.621 255.929V86.4751C301.621 46.5581 269.32 14.0801 229.619 14.0801C196.991 14.0801 168.377 36.2327 160.021 67.9363L71.1447 405.201ZM53.7101 313.047L14.4299 462.108C13.3796 466.097 14.2198 470.274 16.7172 473.56C19.2145 476.845 23.0188 478.722 27.1499 478.722C33.1014 478.722 38.3295 474.686 39.8699 468.89L56.6742 405.107C54.7371 396.8 53.7101 388.141 53.7101 379.247V313.07V313.047ZM89.5828 14.0801C77.5163 14.0801 67.7138 23.9361 67.7138 36.0684V204.935L110.728 41.7005C112.479 35.0594 111.102 28.1132 106.924 22.6689C102.746 17.2246 96.4446 14.0801 89.5828 14.0801Z",
];

export const ShapeAnimation = ({ onComplete }: { onComplete?: () => void }) => {
  const [pathIndex, setPathIndex] = useState<number>(0);
  const progress = useMotionValue(0);
  const getIndex = paths.map((_, i) => i);
  const ref = useRef<SVGSVGElement | null>(null);
  const isInView = useInView(ref as React.RefObject<Element>, { once: true });
  const path = useTransform(progress, getIndex, paths, {
    mixer: (a, b) => interpolate(a, b),
  });

  useEffect(() => {
    if (isInView) {
      animate(progress, pathIndex, {
        duration: 0.3,
        ease: "easeInOut",
        delay: 0.1,
        onComplete: () => {
          setPathIndex(pathIndex + 1);

          if (pathIndex + 1 === paths.length) {
            onComplete?.();
          }
        },
      });
    }
  }, [isInView, onComplete, pathIndex, progress]);

  return (
    <motion.svg
      ref={ref}
      width="100%"
      height="100%"
      viewBox="-100 -150 700 900"
      preserveAspectRatio="none"
    >
      <motion.path d={path} fill="#F83535" />
    </motion.svg>
  );
};
